{"version":3,"sources":["utils.js","sound.js"],"names":["hslToRgb","h","s","l","r","g","b","hue2rgb","p","q","t","Math","round","WIDTH","HEIGHT","canvas","document","querySelector","ctx","getContext","analyser","bufferLength","handleError","err","console","log","getAudio","stream","navigator","mediaDevices","getUserMedia","audio","catch","audioCtx","AudioContext","createAnalyser","createMediaStreamSource","connect","fftSize","frequencyBinCount","timeData","Uint8Array","frequencyData","drawTimeData","drawFrequency","clearRect","getByteTimeDomainData","lineWidth","strokeStyle","beginPath","sliceWidth","x","forEach","data","i","v","y","moveTo","lineTo","stroke","webkitRequestAnimationFrame","getByteFrequencyData","barWidth","amount","percent","barHeight","fillStyle","fillRect","requestAnimationFrame","height","width"],"mappings":";AAyBC,aAzBM,SAASA,EAASC,EAAGC,EAAGC,GACzBC,IAAAA,EACAC,EACAC,EAEAJ,GAAK,GAALA,EACFE,EAAIC,EAAIC,EAAIH,MACP,CACCI,MAAAA,EAAU,SAAiBC,EAAGC,EAAGC,GAGjCA,OAFAA,EAAI,IAAGA,GAAK,GACZA,EAAI,IAAGA,GAAK,GACZA,EAAI,EAAI,EAAUF,EAAc,GAATC,EAAID,GAASE,EACpCA,EAAI,GAAcD,EAClBC,EAAI,EAAI,EAAUF,GAAKC,EAAID,IAAM,EAAI,EAAIE,GAAK,EAC3CF,GAGHC,EAAIN,EAAI,GAAMA,GAAK,EAAID,GAAKC,EAAID,EAAIC,EAAID,EACxCM,EAAI,EAAIL,EAAIM,EAClBL,EAAIG,EAAQC,EAAGC,EAAGR,EAAI,EAAI,GAC1BI,EAAIE,EAAQC,EAAGC,EAAGR,GAClBK,EAAIC,EAAQC,EAAGC,EAAGR,EAAI,EAAI,GAGrB,MAAA,CAACU,KAAKC,MAAU,IAAJR,GAAUO,KAAKC,MAAU,IAAJP,GAAUM,KAAKC,MAAU,IAAJN,IAC9D,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA;;AC0DO,aAnFR,IAAA,EAAA,QAAA,WACA,MAAMO,EAAQ,KACRC,EAAS,KAETC,EAASC,SAASC,cAAc,UAChCC,EAAMH,EAAOI,WAAW,MAI9B,IAAIC,EACAC,EAEJ,SAASC,EAAYC,GACnBC,QAAQC,IAAI,wCAGd,eAAeC,IACPC,MAAAA,QAAeC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAAQC,MAAMV,GAC1EW,EAAW,IAAIC,aACrBd,EAAWa,EAASE,iBACLF,EAASG,wBAAwBT,GACzCU,QAAQjB,GAGfA,EAASkB,QAAU,KAGnBjB,EAAeD,EAASmB,kBAElBC,MAAAA,EAAW,IAAIC,WAAWpB,GAE1BqB,EAAgB,IAAID,WAAWpB,GAErCsB,EAAaH,GACbI,EAAcF,GAGhB,SAASC,EAAaH,GACpBtB,EAAI2B,UAAU,EAAG,EAAGhC,EAAOC,GAG3BM,EAAS0B,sBAAsBN,GAG/BtB,EAAI6B,UAAY,GAChB7B,EAAI8B,YAAc,UAClB9B,EAAI+B,YACEC,MAAAA,EAAarC,EAAQQ,EAEvB8B,IAAAA,EAAI,EACRX,EAASY,QAAQ,CAACC,EAAMC,KAChBC,MACAC,EADIH,EAAO,IACFvC,EAAU,EACf,IAANwC,EACFpC,EAAIuC,OAAON,EAAGK,GAEdtC,EAAIwC,OAAOP,EAAGK,GAEhBL,GAAKD,IAEPhC,EAAIyC,SAEJC,4BAA4B,IAAMjB,EAAaH,IAGjD,SAASI,EAAcF,GACrBtB,EAASyC,qBAAqBnB,GACxBoB,MAAAA,EAAYjD,EAAQQ,EAAgB,IACtC8B,IAAAA,EAAI,EACRT,EAAcU,QAASW,IACfC,MAAAA,EAAUD,EAAS,KAClB9D,EAAGC,EAAGC,GAAK,CAAC,KAAiB,IAAV6D,GAAiB,EAAG,GAAK,IAC7CC,EAAYnD,EAASkD,EAAU,IAE9B5D,EAAGC,EAAGC,IAAK,EAASL,EAAAA,UAAAA,EAAGC,EAAGC,GACjCe,EAAIgD,iBAAmB9D,KAAKC,KAAKC,KACjCY,EAAIiD,SAAShB,EAAGrC,EAASmD,EAAWH,EAAUG,GAC9Cd,GAAKW,EAAW,IAGlBM,sBAAsB,IAAMxB,EAAcF,IA1E5C3B,EAAOsD,OAASvD,EAChBC,EAAOuD,MAAQzD,EA4Efa","file":"sound.69c88410.js","sourceRoot":"..","sourcesContent":["export function hslToRgb(h, s, l) {\n  let r;\n  let g;\n  let b;\n\n  if (s == 0) {\n    r = g = b = l; // achromatic\n  } else {\n    const hue2rgb = function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}\n","import { hslToRgb } from \"./utils\";\r\nconst WIDTH = 1500;\r\nconst HEIGHT = 1500;\r\n\r\nconst canvas = document.querySelector(\"canvas\");\r\nconst ctx = canvas.getContext(\"2d\");\r\ncanvas.height = HEIGHT;\r\ncanvas.width = WIDTH;\r\n\r\nlet analyser;\r\nlet bufferLength;\r\n\r\nfunction handleError(err) {\r\n  console.log(\"You must give access to your micro !\");\r\n}\r\n\r\nasync function getAudio() {\r\n  const stream = await navigator.mediaDevices.getUserMedia({ audio: true }).catch(handleError);\r\n  const audioCtx = new AudioContext();\r\n  analyser = audioCtx.createAnalyser();\r\n  const source = audioCtx.createMediaStreamSource(stream);\r\n  source.connect(analyser);\r\n\r\n  //number of data collect\r\n  analyser.fftSize = 2 ** 10;\r\n\r\n  //pull data off the audio\r\n  bufferLength = analyser.frequencyBinCount;\r\n\r\n  const timeData = new Uint8Array(bufferLength);\r\n\r\n  const frequencyData = new Uint8Array(bufferLength);\r\n\r\n  drawTimeData(timeData);\r\n  drawFrequency(frequencyData);\r\n}\r\n\r\nfunction drawTimeData(timeData) {\r\n  ctx.clearRect(0, 0, WIDTH, HEIGHT);\r\n  //inject time data into timedata array\r\n\r\n  analyser.getByteTimeDomainData(timeData);\r\n\r\n  //visual\r\n  ctx.lineWidth = 10;\r\n  ctx.strokeStyle = \"#ffc600\";\r\n  ctx.beginPath();\r\n  const sliceWidth = WIDTH / bufferLength;\r\n\r\n  let x = 0;\r\n  timeData.forEach((data, i) => {\r\n    const v = data / 128;\r\n    const y = (v * HEIGHT) / 2;\r\n    if (i === 0) {\r\n      ctx.moveTo(x, y);\r\n    } else {\r\n      ctx.lineTo(x, y);\r\n    }\r\n    x += sliceWidth;\r\n  });\r\n  ctx.stroke();\r\n  //call itself asap\r\n  webkitRequestAnimationFrame(() => drawTimeData(timeData));\r\n}\r\n\r\nfunction drawFrequency(frequencyData) {\r\n  analyser.getByteFrequencyData(frequencyData);\r\n  const barWidth = (WIDTH / bufferLength) * 2.5;\r\n  let x = 0;\r\n  frequencyData.forEach((amount) => {\r\n    const percent = amount / 255;\r\n    const [h, s, l] = [360 / (percent * 360) - 0, 0.8, 0.5];\r\n    const barHeight = HEIGHT * percent * 0.5;\r\n    // TODO: Convert the colour to HSL TODO\r\n    const [r, g, b] = hslToRgb(h, s, l);\r\n    ctx.fillStyle = `rgb(${r},${g},${b})`;\r\n    ctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\r\n    x += barWidth + 2;\r\n  });\r\n\r\n  requestAnimationFrame(() => drawFrequency(frequencyData));\r\n}\r\n\r\ngetAudio();\r\n"]}